# Generated by Django 5.1.4 on 2025-10-13 17:28

from django.db import migrations, models


def add_season_fields_if_not_exists(apps, schema_editor):
    """
    Safely add season fields only if they don't already exist.
    This handles the case where production DB already has these columns.
    """
    connection = schema_editor.connection
    
    with connection.cursor() as cursor:
        # Check if Contestant.season exists
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name='poolapp_contestant' AND column_name='season';
        """)
        contestant_has_season = cursor.fetchone() is not None
        
        # Check if Week.season exists
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name='poolapp_week' AND column_name='season';
        """)
        week_has_season = cursor.fetchone() is not None
        
        # Only add if doesn't exist
        if not contestant_has_season:
            cursor.execute("""
                ALTER TABLE poolapp_contestant 
                ADD COLUMN season INTEGER DEFAULT 49 NOT NULL;
            """)
            cursor.execute("""
                CREATE INDEX poolapp_contestant_season_idx 
                ON poolapp_contestant(season);
            """)
        
        if not week_has_season:
            cursor.execute("""
                ALTER TABLE poolapp_week 
                ADD COLUMN season INTEGER DEFAULT 49 NOT NULL;
            """)
            cursor.execute("""
                CREATE INDEX poolapp_week_season_idx 
                ON poolapp_week(season);
            """)


class Migration(migrations.Migration):

    dependencies = [
        ("poolapp", "0005_rename_elimination_fields"),
    ]

    operations = [
        # Use SeparateDatabaseAndState to handle columns that might already exist
        migrations.SeparateDatabaseAndState(
            # Database operations - only run if columns don't exist
            database_operations=[
                migrations.RunPython(add_season_fields_if_not_exists, migrations.RunPython.noop),
            ],
            # State operations - tell Django the fields exist (for migration state consistency)
            state_operations=[
                migrations.AddField(
                    model_name="contestant",
                    name="season",
                    field=models.PositiveIntegerField(db_index=True, default=49),
                ),
                migrations.AddField(
                    model_name="week",
                    name="season",
                    field=models.PositiveIntegerField(db_index=True, default=49),
                ),
            ],
        ),
        # Now we can safely update unique_together since Django knows about the fields
        migrations.AlterUniqueTogether(
            name="contestant",
            unique_together={("season", "name")},
        ),
    ]
